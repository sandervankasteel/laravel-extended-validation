{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Laravel Extended Validation # This packages hopes to provide you with a lot of useful additional validation rules :) Installation # Laravel Extended Validation requires PHP >= 7.3 and works with Laravel >= 7.0 (and higher). composer require sandervankasteel/laravel-extended-validation Validated versions # Laravel Extended Validation has been tested against the following PHP and Laravel version combinations PHP 7.3 PHP 7.4 PHP 8.0 PHP 8.1 PHP 8.2 Laravel 7.0 \u2705 \u2705 \u2705 \u274c \u274c Laravel 8.0 \u2705 \u2705 \u2705 \u2705 \u2705 Laravel 9.0 \u274c \u274c \u2705 \u2705 \u2705 Usage # All validation rules can be used as any regular Rule object, as mentioned in the Laravel documentation .","title":"Laravel Extended Validation"},{"location":"#laravel-extended-validation","text":"This packages hopes to provide you with a lot of useful additional validation rules :)","title":"Laravel Extended Validation"},{"location":"#installation","text":"Laravel Extended Validation requires PHP >= 7.3 and works with Laravel >= 7.0 (and higher). composer require sandervankasteel/laravel-extended-validation","title":"Installation"},{"location":"#validated-versions","text":"Laravel Extended Validation has been tested against the following PHP and Laravel version combinations PHP 7.3 PHP 7.4 PHP 8.0 PHP 8.1 PHP 8.2 Laravel 7.0 \u2705 \u2705 \u2705 \u274c \u274c Laravel 8.0 \u2705 \u2705 \u2705 \u2705 \u2705 Laravel 9.0 \u274c \u274c \u2705 \u2705 \u2705","title":"Validated versions"},{"location":"#usage","text":"All validation rules can be used as any regular Rule object, as mentioned in the Laravel documentation .","title":"Usage"},{"location":"changelog/","text":"Changelog # [0.6.0] - 12-12-2022 # Added # Added British VAT rule Added testing with PHP 8.2 Fixed # Issue that the TLD of a domain couldn't be longer then 6 characters #125 [0.5.0] - 24-07-2022 # Added # Added Japanese Postal code rule Added Russian Postal code rule Added Swedish Postal code rule Added Danish Postal code rule Added Greek Postal code rule Added BSB number rule Added docker-compose for development Added Laravel 9.x support Added support for PHP 8.1 Changed # Refactored RBG and RGBA rules Renamed \"UK\" namespace to \"GB\" [0.4.0] - 26-01-2022 # Added # RGB validation rule RGBA validation rule Luxembourg postal code rule Spanish postal code rule Italian postal code rule Irish postal code rule South Korean (ROK) postal code rule Discover card validation rule Portuguese postal code rule Spanish VAT number Domain name rule Italian VAT number [0.3.0] - 09-01-2022 # Added # EAN8 validation rule EAN5 validation rule EAN13 validation rule UPC-A validation rule UPC-E validation rule JAN (Japanese Article Number) validation rule ASIN validation rule Added TimeZoneAbbr Rule [0.2.0] - 02-01-2022 # Added # Added IPv4 validation rule Added IPv6 validation rule Added Mac Address validation rule Added Luxembourg VAT number validation Added German VAT number validation Added Belgium VAT number validation Added French VAT number validation Added UK Postal Code validation Added German Postal Code validation Added American Express validation rule Added MasterCard validation rule Added Visa validation rule [0.1.1] - 13-12-2021 # Fixed # Fixed issue with loading Service Provider [0.1.0] - 11-12-2021 (First Release \ud83e\udd73) # Added # Rule for Dutch postal codes Rule for Dutch Social Security numbers Rule for Dutch VAT numbers Rule for Belgium postal codes Added Database/LessThanValue rule Added Database/LessThanOrEqualValue rule Added Database/MoreThanValue rule Added Database/MoreThanOrEqualValue rule Added Database/MustBeEqualValue rule Added Color/HexColor rule Added rule for IBAN numbers Added rule for 10 digit's ISBN numbers Added rule for 13 digit's ISBN numbers Added rule for a 12hour time format Added rule for a 24hour time format Added rule for validating UNIX timestamps Added \"OrRule\"","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#060-12-12-2022","text":"","title":"[0.6.0] - 12-12-2022"},{"location":"changelog/#added","text":"Added British VAT rule Added testing with PHP 8.2","title":"Added"},{"location":"changelog/#fixed","text":"Issue that the TLD of a domain couldn't be longer then 6 characters #125","title":"Fixed"},{"location":"changelog/#050-24-07-2022","text":"","title":"[0.5.0] - 24-07-2022"},{"location":"changelog/#added_1","text":"Added Japanese Postal code rule Added Russian Postal code rule Added Swedish Postal code rule Added Danish Postal code rule Added Greek Postal code rule Added BSB number rule Added docker-compose for development Added Laravel 9.x support Added support for PHP 8.1","title":"Added"},{"location":"changelog/#changed","text":"Refactored RBG and RGBA rules Renamed \"UK\" namespace to \"GB\"","title":"Changed"},{"location":"changelog/#040-26-01-2022","text":"","title":"[0.4.0] - 26-01-2022"},{"location":"changelog/#added_2","text":"RGB validation rule RGBA validation rule Luxembourg postal code rule Spanish postal code rule Italian postal code rule Irish postal code rule South Korean (ROK) postal code rule Discover card validation rule Portuguese postal code rule Spanish VAT number Domain name rule Italian VAT number","title":"Added"},{"location":"changelog/#030-09-01-2022","text":"","title":"[0.3.0] - 09-01-2022"},{"location":"changelog/#added_3","text":"EAN8 validation rule EAN5 validation rule EAN13 validation rule UPC-A validation rule UPC-E validation rule JAN (Japanese Article Number) validation rule ASIN validation rule Added TimeZoneAbbr Rule","title":"Added"},{"location":"changelog/#020-02-01-2022","text":"","title":"[0.2.0] - 02-01-2022"},{"location":"changelog/#added_4","text":"Added IPv4 validation rule Added IPv6 validation rule Added Mac Address validation rule Added Luxembourg VAT number validation Added German VAT number validation Added Belgium VAT number validation Added French VAT number validation Added UK Postal Code validation Added German Postal Code validation Added American Express validation rule Added MasterCard validation rule Added Visa validation rule","title":"Added"},{"location":"changelog/#011-13-12-2021","text":"","title":"[0.1.1] - 13-12-2021"},{"location":"changelog/#fixed_1","text":"Fixed issue with loading Service Provider","title":"Fixed"},{"location":"changelog/#010-11-12-2021-first-release","text":"","title":"[0.1.0] - 11-12-2021 (First Release \ud83e\udd73)"},{"location":"changelog/#added_5","text":"Rule for Dutch postal codes Rule for Dutch Social Security numbers Rule for Dutch VAT numbers Rule for Belgium postal codes Added Database/LessThanValue rule Added Database/LessThanOrEqualValue rule Added Database/MoreThanValue rule Added Database/MoreThanOrEqualValue rule Added Database/MustBeEqualValue rule Added Color/HexColor rule Added rule for IBAN numbers Added rule for 10 digit's ISBN numbers Added rule for 13 digit's ISBN numbers Added rule for a 12hour time format Added rule for a 24hour time format Added rule for validating UNIX timestamps Added \"OrRule\"","title":"Added"},{"location":"barcode/ASIN/","text":"Amazon Standard Identification Number # This validation rules checks if the posted input is a valid ASIN. Valid examples are: B015OW3P1O B07W7ML34V B08XY388HX Class # LaravelExtendedValidation\\Rules\\Barcode\\ASIN Constructor argument(s) # none","title":"Amazon Standard Identification Number"},{"location":"barcode/ASIN/#amazon-standard-identification-number","text":"This validation rules checks if the posted input is a valid ASIN. Valid examples are: B015OW3P1O B07W7ML34V B08XY388HX","title":"Amazon Standard Identification Number"},{"location":"barcode/ASIN/#class","text":"LaravelExtendedValidation\\Rules\\Barcode\\ASIN","title":"Class"},{"location":"barcode/ASIN/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"barcode/EAN13/","text":"EAN13 # This validation rules checks if the posted input is a valid EAN-13 number. Valid examples are: 4006381333931 4988009045368 8809696003416 Class # LaravelExtendedValidation\\Rules\\Barcode\\EAN13 Constructor argument(s) # none","title":"EAN13"},{"location":"barcode/EAN13/#ean13","text":"This validation rules checks if the posted input is a valid EAN-13 number. Valid examples are: 4006381333931 4988009045368 8809696003416","title":"EAN13"},{"location":"barcode/EAN13/#class","text":"LaravelExtendedValidation\\Rules\\Barcode\\EAN13","title":"Class"},{"location":"barcode/EAN13/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"barcode/EAN5/","text":"EAN5 # This validation rules checks if the posted input is a valid EAN-5 number. EAN-5 is a 5-digit European Article Number code, and is a supplement to the EAN-13 barcode which is primarly used on books. It is used to give a suggestion for the price of the book. Valid examples are: 52495 54495 05415 Class # LaravelExtendedValidation\\Rules\\Barcode\\EAN5 Constructor argument(s) # none","title":"EAN5"},{"location":"barcode/EAN5/#ean5","text":"This validation rules checks if the posted input is a valid EAN-5 number. EAN-5 is a 5-digit European Article Number code, and is a supplement to the EAN-13 barcode which is primarly used on books. It is used to give a suggestion for the price of the book. Valid examples are: 52495 54495 05415","title":"EAN5"},{"location":"barcode/EAN5/#class","text":"LaravelExtendedValidation\\Rules\\Barcode\\EAN5","title":"Class"},{"location":"barcode/EAN5/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"barcode/EAN8/","text":"EAN8 # This validation rules checks if the posted input is a valid EAN-8 number. Class # LaravelExtendedValidation\\Rules\\Barcode\\EAN8 Valid examples are: 73513537 20123451 Constructor argument(s) # none","title":"EAN8"},{"location":"barcode/EAN8/#ean8","text":"This validation rules checks if the posted input is a valid EAN-8 number.","title":"EAN8"},{"location":"barcode/EAN8/#class","text":"LaravelExtendedValidation\\Rules\\Barcode\\EAN8 Valid examples are: 73513537 20123451","title":"Class"},{"location":"barcode/EAN8/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"barcode/ISBN10/","text":"ISBN10 # This validation rules checks if the posted input is a valid ISBN (10) number and validated according to the International ISBN Agency standard. It will accept ISBN(10) numbers with and without separator signs. The separator signs that are accepted are , - and _ Class # LaravelExtendedValidation\\Rules\\Barcode\\ISBN10 Constructor argument(s) # none","title":"ISBN10"},{"location":"barcode/ISBN10/#isbn10","text":"This validation rules checks if the posted input is a valid ISBN (10) number and validated according to the International ISBN Agency standard. It will accept ISBN(10) numbers with and without separator signs. The separator signs that are accepted are , - and _","title":"ISBN10"},{"location":"barcode/ISBN10/#class","text":"LaravelExtendedValidation\\Rules\\Barcode\\ISBN10","title":"Class"},{"location":"barcode/ISBN10/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"barcode/ISBN13/","text":"ISBN13 # This validation rules checks if the posted input is a valid ISBN (13) number and validated according to the International ISBN Agency standard. It will accept ISBN(13) numbers with and without separator signs. The separator signs that are accepted are , - and _ Class # LaravelExtendedValidation\\Rules\\Barcode\\ISBN13 Constructor argument(s) # none","title":"ISBN13"},{"location":"barcode/ISBN13/#isbn13","text":"This validation rules checks if the posted input is a valid ISBN (13) number and validated according to the International ISBN Agency standard. It will accept ISBN(13) numbers with and without separator signs. The separator signs that are accepted are , - and _","title":"ISBN13"},{"location":"barcode/ISBN13/#class","text":"LaravelExtendedValidation\\Rules\\Barcode\\ISBN13","title":"Class"},{"location":"barcode/ISBN13/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"barcode/ISMN/","text":"International Standard Music Number (ISMN) # This validation rules checks if the posted input is a valid International Standard Music Number (ISMN) number and validated using the same rules as an ISBN-13 number, but it should start with \"9790\". It will accept ISMN numbers with and without separator signs. The separator signs that are accepted are , - and _ Class # LaravelExtendedValidation\\Rules\\Barcode\\ISMN Constructor argument(s) # none","title":"International Standard Music Number (ISMN)"},{"location":"barcode/ISMN/#international-standard-music-number-ismn","text":"This validation rules checks if the posted input is a valid International Standard Music Number (ISMN) number and validated using the same rules as an ISBN-13 number, but it should start with \"9790\". It will accept ISMN numbers with and without separator signs. The separator signs that are accepted are , - and _","title":"International Standard Music Number (ISMN)"},{"location":"barcode/ISMN/#class","text":"LaravelExtendedValidation\\Rules\\Barcode\\ISMN","title":"Class"},{"location":"barcode/ISMN/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"barcode/JAN/","text":"JAN # This validation rules checks if the posted input is a valid JAN (Japanese Article Number) number. It does the same check as the EAN13 rule with the addition that a JAN barcode SHOULD start with either \"45\" or \"49\". Valid examples: 4988009045368 4988009031897 4988010023133 4514392200031 Class # LaravelExtendedValidation\\Rules\\Barcode\\JAN Constructor argument(s) # none","title":"JAN"},{"location":"barcode/JAN/#jan","text":"This validation rules checks if the posted input is a valid JAN (Japanese Article Number) number. It does the same check as the EAN13 rule with the addition that a JAN barcode SHOULD start with either \"45\" or \"49\". Valid examples: 4988009045368 4988009031897 4988010023133 4514392200031","title":"JAN"},{"location":"barcode/JAN/#class","text":"LaravelExtendedValidation\\Rules\\Barcode\\JAN","title":"Class"},{"location":"barcode/JAN/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"barcode/UPC-A/","text":"UPC-A # This validation rules checks if the posted input is a valid UPC (also known as UPC-A) number. Valid examples are: 012345678905 036000291452 042100005264 Class # LaravelExtendedValidation\\Rules\\Barcode\\UPC_A Constructor argument(s) # none","title":"UPC-A"},{"location":"barcode/UPC-A/#upc-a","text":"This validation rules checks if the posted input is a valid UPC (also known as UPC-A) number. Valid examples are: 012345678905 036000291452 042100005264","title":"UPC-A"},{"location":"barcode/UPC-A/#class","text":"LaravelExtendedValidation\\Rules\\Barcode\\UPC_A","title":"Class"},{"location":"barcode/UPC-A/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"barcode/UPC-E/","text":"UPC-E # This validation rules checks if the posted input is a valid 8-digit UPC (also known as UPC-E) number. Valid examples are: 01234565 00223393 17123457 Class # LaravelExtendedValidation\\Rules\\Barcode\\UPC_E Constructor argument(s) # none","title":"UPC-E"},{"location":"barcode/UPC-E/#upc-e","text":"This validation rules checks if the posted input is a valid 8-digit UPC (also known as UPC-E) number. Valid examples are: 01234565 00223393 17123457","title":"UPC-E"},{"location":"barcode/UPC-E/#class","text":"LaravelExtendedValidation\\Rules\\Barcode\\UPC_E","title":"Class"},{"location":"barcode/UPC-E/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"color/HexColor/","text":"HexColor # This validation rules checks if the posted input is a valid Hexadecimal color code. It will accept any input either with or without the # -sign and 3 or 6 character inputs. Class # LaravelExtendedValidation\\Rules\\Color\\HexColor Accepted input examples are: - #333 - #ff00ff - ff00ff Constructor argument(s) # none","title":"HexColor"},{"location":"color/HexColor/#hexcolor","text":"This validation rules checks if the posted input is a valid Hexadecimal color code. It will accept any input either with or without the # -sign and 3 or 6 character inputs.","title":"HexColor"},{"location":"color/HexColor/#class","text":"LaravelExtendedValidation\\Rules\\Color\\HexColor Accepted input examples are: - #333 - #ff00ff - ff00ff","title":"Class"},{"location":"color/HexColor/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"color/RGB/","text":"RGB # This validation rules checks if the posted input is a valid RGB color code. The color values should be between 0 and 255 . The rule is insensitive of the 'RGB' casing. Class # LaravelExtendedValidation\\Rules\\Color\\RGB Valid examples are: - rgb(255,255,255) - RGB(255,255,255) Constructor argument(s) # none","title":"RGB"},{"location":"color/RGB/#rgb","text":"This validation rules checks if the posted input is a valid RGB color code. The color values should be between 0 and 255 . The rule is insensitive of the 'RGB' casing.","title":"RGB"},{"location":"color/RGB/#class","text":"LaravelExtendedValidation\\Rules\\Color\\RGB Valid examples are: - rgb(255,255,255) - RGB(255,255,255)","title":"Class"},{"location":"color/RGB/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"color/RGBA/","text":"RGBA # This validation rules checks if the posted input is a valid RGB color code. The color values should be between 0 and 255 . and the alpha channel should be between 0.1 and 1.0 . The rule is insensitive of the 'RGB' casing. Class # LaravelExtendedValidation\\Rules\\Color\\RGBA Valid examples are: - rgba(255,255,255,0.1) - RGBA(255,255,255,0.5) Constructor argument(s) # none","title":"RGBA"},{"location":"color/RGBA/#rgba","text":"This validation rules checks if the posted input is a valid RGB color code. The color values should be between 0 and 255 . and the alpha channel should be between 0.1 and 1.0 . The rule is insensitive of the 'RGB' casing.","title":"RGBA"},{"location":"color/RGBA/#class","text":"LaravelExtendedValidation\\Rules\\Color\\RGBA Valid examples are: - rgba(255,255,255,0.1) - RGBA(255,255,255,0.5)","title":"Class"},{"location":"color/RGBA/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"database/LessThanOrEqualValue/","text":"LessThanOrEqualValue # A validation rule that checks if the POSTed value is less or equal to a value found in a database row. Please note, this validation fails when it can not find a record to compare against. Class # LaravelExtendedValidation\\Rules\\Database\\LessThanOrEqualValue Constructor argument(s) # $table = '' // Table name to search in $column = '' // Column the compare the value with. $identifierColumn = '' // Identifying column $uniqueIdentifier = '' // Unique identifying value for a row (Would most likely be a primary key value) Example # class DiscountPriceController extends Controller { public function storeDiscountedPrice(Request $request) { $validated = $request->validate([ 'product_id' => [ 'required', 'numeric', 'exists:products,id' ], 'price' => [ 'required' 'numeric' , new LessThanOrEqualValue( 'products', 'price', 'id', $request->product_id, ); ], ]); return Discount::create([ 'product_id' => $validated->['product_id'], 'price' => $validated->['price'] ]); } }","title":"LessThanOrEqualValue"},{"location":"database/LessThanOrEqualValue/#lessthanorequalvalue","text":"A validation rule that checks if the POSTed value is less or equal to a value found in a database row. Please note, this validation fails when it can not find a record to compare against.","title":"LessThanOrEqualValue"},{"location":"database/LessThanOrEqualValue/#class","text":"LaravelExtendedValidation\\Rules\\Database\\LessThanOrEqualValue","title":"Class"},{"location":"database/LessThanOrEqualValue/#constructor-arguments","text":"$table = '' // Table name to search in $column = '' // Column the compare the value with. $identifierColumn = '' // Identifying column $uniqueIdentifier = '' // Unique identifying value for a row (Would most likely be a primary key value)","title":"Constructor argument(s)"},{"location":"database/LessThanOrEqualValue/#example","text":"class DiscountPriceController extends Controller { public function storeDiscountedPrice(Request $request) { $validated = $request->validate([ 'product_id' => [ 'required', 'numeric', 'exists:products,id' ], 'price' => [ 'required' 'numeric' , new LessThanOrEqualValue( 'products', 'price', 'id', $request->product_id, ); ], ]); return Discount::create([ 'product_id' => $validated->['product_id'], 'price' => $validated->['price'] ]); } }","title":"Example"},{"location":"database/LessThanValue/","text":"LessThanValue # A validation rule that checks if the POSTed value is less than a value found in a database row. Please note, this validation fails when it can not find a record to compare against. Class # LaravelExtendedValidation\\Rules\\Database\\LessThanValue Constructor argument(s) # $table = '' // Table name to search in $column = '' // Column the compare the value with. $identifierColumn = '' // Identifying column $uniqueIdentifier = '' // Unique identifying value for a row (Would most likely be a primary key value) Example # class DiscountPriceController extends Controller { public function storeDiscountedPrice(Request $request) { $validated = $request->validate([ 'product_id' => [ 'required', 'numeric', 'exists:products,id' ], 'price' => [ 'required' 'numeric' , new LessThanValue( 'products', 'price', 'id', $request->product_id, ); ], ]); return Discount::create([ 'product_id' => $validated->['product_id'], 'price' => $validated->['price'] ]); } }","title":"LessThanValue"},{"location":"database/LessThanValue/#lessthanvalue","text":"A validation rule that checks if the POSTed value is less than a value found in a database row. Please note, this validation fails when it can not find a record to compare against.","title":"LessThanValue"},{"location":"database/LessThanValue/#class","text":"LaravelExtendedValidation\\Rules\\Database\\LessThanValue","title":"Class"},{"location":"database/LessThanValue/#constructor-arguments","text":"$table = '' // Table name to search in $column = '' // Column the compare the value with. $identifierColumn = '' // Identifying column $uniqueIdentifier = '' // Unique identifying value for a row (Would most likely be a primary key value)","title":"Constructor argument(s)"},{"location":"database/LessThanValue/#example","text":"class DiscountPriceController extends Controller { public function storeDiscountedPrice(Request $request) { $validated = $request->validate([ 'product_id' => [ 'required', 'numeric', 'exists:products,id' ], 'price' => [ 'required' 'numeric' , new LessThanValue( 'products', 'price', 'id', $request->product_id, ); ], ]); return Discount::create([ 'product_id' => $validated->['product_id'], 'price' => $validated->['price'] ]); } }","title":"Example"},{"location":"database/MoreThanOrEqualValue/","text":"MoreThanValueOrEqualValue # A validation rule that checks if the POSTed value is more or equal to a value found in a database row. Please note, this validation fails when it can not find a record to compare against. Class # LaravelExtendedValidation\\Rules\\Database\\MoreThanValueOrEqualValue Constructor argument(s) # $table = '' // Table name to search in $column = '' // Column the compare the value with. $identifierColumn = '' // Identifying column $uniqueIdentifier = '' // Unique identifying value for a row (Would most likely be a primary key value)","title":"MoreThanValueOrEqualValue"},{"location":"database/MoreThanOrEqualValue/#morethanvalueorequalvalue","text":"A validation rule that checks if the POSTed value is more or equal to a value found in a database row. Please note, this validation fails when it can not find a record to compare against.","title":"MoreThanValueOrEqualValue"},{"location":"database/MoreThanOrEqualValue/#class","text":"LaravelExtendedValidation\\Rules\\Database\\MoreThanValueOrEqualValue","title":"Class"},{"location":"database/MoreThanOrEqualValue/#constructor-arguments","text":"$table = '' // Table name to search in $column = '' // Column the compare the value with. $identifierColumn = '' // Identifying column $uniqueIdentifier = '' // Unique identifying value for a row (Would most likely be a primary key value)","title":"Constructor argument(s)"},{"location":"database/MoreThanValue/","text":"MoreThanValue # A validation rule that checks if the POSTed value is more than a value found in a database row. Please note, this validation fails when it can not find a record to compare against. Class # LaravelExtendedValidation\\Rules\\Database\\MoreThanValue Constructor argument(s) # $table = '' // Table name to search in $column = '' // Column the compare the value with. $identifierColumn = '' // Identifying column $uniqueIdentifier = '' // Unique identifying value for a row (Would most likely be a primary key value)","title":"MoreThanValue"},{"location":"database/MoreThanValue/#morethanvalue","text":"A validation rule that checks if the POSTed value is more than a value found in a database row. Please note, this validation fails when it can not find a record to compare against.","title":"MoreThanValue"},{"location":"database/MoreThanValue/#class","text":"LaravelExtendedValidation\\Rules\\Database\\MoreThanValue","title":"Class"},{"location":"database/MoreThanValue/#constructor-arguments","text":"$table = '' // Table name to search in $column = '' // Column the compare the value with. $identifierColumn = '' // Identifying column $uniqueIdentifier = '' // Unique identifying value for a row (Would most likely be a primary key value)","title":"Constructor argument(s)"},{"location":"database/MustBeEqualValue/","text":"MustBeEqualValue # A validation rule that checks if the POSTed value is equal to a value found in a database row. Please note, this validation fails when it can not find a record to compare against. Class # LaravelExtendedValidation\\Rules\\Database\\MustBeEqualValue Constructor argument(s) # $table = '' // Table name to search in $column = '' // Column the compare the value with. $identifierColumn = '' // Identifying column $uniqueIdentifier = '' // Unique identifying value for a row (Would most likely be a primary key value)","title":"MustBeEqualValue"},{"location":"database/MustBeEqualValue/#mustbeequalvalue","text":"A validation rule that checks if the POSTed value is equal to a value found in a database row. Please note, this validation fails when it can not find a record to compare against.","title":"MustBeEqualValue"},{"location":"database/MustBeEqualValue/#class","text":"LaravelExtendedValidation\\Rules\\Database\\MustBeEqualValue","title":"Class"},{"location":"database/MustBeEqualValue/#constructor-arguments","text":"$table = '' // Table name to search in $column = '' // Column the compare the value with. $identifierColumn = '' // Identifying column $uniqueIdentifier = '' // Unique identifying value for a row (Would most likely be a primary key value)","title":"Constructor argument(s)"},{"location":"dateandtime/Time12Hour/","text":"Time12Hour # This validation rules checks if the posted input is a valid 12-hour time. Please note that posted times like 12:42:72 are considered to be invalid because they overflow a particular unit of time (in this case seconds.) Class # LaravelExtendedValidation\\Rules\\DateAndTime\\Time12Hour Constructor argument(s) # $requiresMeridiem = false; // Requires the meridiem (AM or PM) to be present in the posted string. $timeSeparator = ':';","title":"Time12Hour"},{"location":"dateandtime/Time12Hour/#time12hour","text":"This validation rules checks if the posted input is a valid 12-hour time. Please note that posted times like 12:42:72 are considered to be invalid because they overflow a particular unit of time (in this case seconds.)","title":"Time12Hour"},{"location":"dateandtime/Time12Hour/#class","text":"LaravelExtendedValidation\\Rules\\DateAndTime\\Time12Hour","title":"Class"},{"location":"dateandtime/Time12Hour/#constructor-arguments","text":"$requiresMeridiem = false; // Requires the meridiem (AM or PM) to be present in the posted string. $timeSeparator = ':';","title":"Constructor argument(s)"},{"location":"dateandtime/Time24Hour/","text":"Time24Hour # This validation rules checks if the posted input is a valid 24-hour time. Please note that posted times like 12:42:72 are considered to be invalid because they overflow a particular unit of time (in this case seconds.) Class # LaravelExtendedValidation\\Rules\\DateAndTime\\Time24Hour Constructor argument(s) # $timeSeparator = ':';","title":"Time24Hour"},{"location":"dateandtime/Time24Hour/#time24hour","text":"This validation rules checks if the posted input is a valid 24-hour time. Please note that posted times like 12:42:72 are considered to be invalid because they overflow a particular unit of time (in this case seconds.)","title":"Time24Hour"},{"location":"dateandtime/Time24Hour/#class","text":"LaravelExtendedValidation\\Rules\\DateAndTime\\Time24Hour","title":"Class"},{"location":"dateandtime/Time24Hour/#constructor-arguments","text":"$timeSeparator = ':';","title":"Constructor argument(s)"},{"location":"dateandtime/TimeZoneAbbr/","text":"TimeZoneAbbr # This validation rules checks if the posted input can is a valid Time Zone abbreviation. Class # LaravelExtendedValidation\\Rules\\DateAndTime\\TimeZoneAbbr For the full list of accepted timezone abbreviations please check the source of this rule. Valid examples: CEST KST JST Constructor argument(s) # none","title":"TimeZoneAbbr"},{"location":"dateandtime/TimeZoneAbbr/#timezoneabbr","text":"This validation rules checks if the posted input can is a valid Time Zone abbreviation.","title":"TimeZoneAbbr"},{"location":"dateandtime/TimeZoneAbbr/#class","text":"LaravelExtendedValidation\\Rules\\DateAndTime\\TimeZoneAbbr For the full list of accepted timezone abbreviations please check the source of this rule. Valid examples: CEST KST JST","title":"Class"},{"location":"dateandtime/TimeZoneAbbr/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"dateandtime/UnixTime/","text":"UnixTime # This validation rules checks if the posted input is a valid UNIX timestamp. Class # LaravelExtendedValidation\\Rules\\DateAndTime\\UnixTime Constructor argument(s) # none","title":"UnixTime"},{"location":"dateandtime/UnixTime/#unixtime","text":"This validation rules checks if the posted input is a valid UNIX timestamp.","title":"UnixTime"},{"location":"dateandtime/UnixTime/#class","text":"LaravelExtendedValidation\\Rules\\DateAndTime\\UnixTime","title":"Class"},{"location":"dateandtime/UnixTime/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"general/OrRule/","text":"OrRule # This validation rules checks, if one of the supplied validation rules is considered to be valid. It fails when ALL rules fail validation. Class # LaravelExtendedValidation\\Rules\\General\\OrRule Constructor argument(s) # $rules: [] // Illuminate\\Contracts\\Validation\\Rule[] Exceptions # \\Exception is thrown when one of the supplied rules in the constructor does not implement the Illuminate\\Contracts\\Validation\\Rule interface. Example implementation # In this use case, we want to update a Book model. The supplied ISBN number should either be an ISBN10 OR an ISBN13 number. public function update(Request $request, Book $book) { $validated = $request->validate([ 'isbn' => [ 'required', new OrRule([ new ISBN10(), new ISBN13(), ]), 'title' => [ 'required, ], ]); return $book->update($validated); }","title":"OrRule"},{"location":"general/OrRule/#orrule","text":"This validation rules checks, if one of the supplied validation rules is considered to be valid. It fails when ALL rules fail validation.","title":"OrRule"},{"location":"general/OrRule/#class","text":"LaravelExtendedValidation\\Rules\\General\\OrRule","title":"Class"},{"location":"general/OrRule/#constructor-arguments","text":"$rules: [] // Illuminate\\Contracts\\Validation\\Rule[]","title":"Constructor argument(s)"},{"location":"general/OrRule/#exceptions","text":"\\Exception is thrown when one of the supplied rules in the constructor does not implement the Illuminate\\Contracts\\Validation\\Rule interface.","title":"Exceptions"},{"location":"general/OrRule/#example-implementation","text":"In this use case, we want to update a Book model. The supplied ISBN number should either be an ISBN10 OR an ISBN13 number. public function update(Request $request, Book $book) { $validated = $request->validate([ 'isbn' => [ 'required', new OrRule([ new ISBN10(), new ISBN13(), ]), 'title' => [ 'required, ], ]); return $book->update($validated); }","title":"Example implementation"},{"location":"locale/AU/Payment/BSBNumber/","text":"BSB Number # Determines if the supplied BSB Number is a valid BSB number. Please note, it does not check with AusPayNet if the BSB number is actually given out to any bank branche(s). Class # LaravelExtendedValidation\\Rules\\Locale\\AU\\Payment\\BSBNumber Valid examples are: 942-208 942208 Constructor argument(s) # none","title":"BSB Number"},{"location":"locale/AU/Payment/BSBNumber/#bsb-number","text":"Determines if the supplied BSB Number is a valid BSB number. Please note, it does not check with AusPayNet if the BSB number is actually given out to any bank branche(s).","title":"BSB Number"},{"location":"locale/AU/Payment/BSBNumber/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\AU\\Payment\\BSBNumber Valid examples are: 942-208 942208","title":"Class"},{"location":"locale/AU/Payment/BSBNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/BE/Address/PostalCode/","text":"Postal code # Determines if the supplied postalcode (zipcode / 'postnummer') is a valid Belgium postalcode. When you instanciate the Rule you have the allow \"special postal codes\" to be considered valid. More info on the special postal codes: https://www.bpost2.be/zipcodes/files/zipcodes_prov_nl_new.pdf Class # LaravelExtendedValidation\\Rules\\Locale\\BE\\Address\\PostalCode Constructor argument(s) # // If we should also check for \"special\" postal codes $checkForSpecialPostalCodes: false","title":"Postal code"},{"location":"locale/BE/Address/PostalCode/#postal-code","text":"Determines if the supplied postalcode (zipcode / 'postnummer') is a valid Belgium postalcode. When you instanciate the Rule you have the allow \"special postal codes\" to be considered valid. More info on the special postal codes: https://www.bpost2.be/zipcodes/files/zipcodes_prov_nl_new.pdf","title":"Postal code"},{"location":"locale/BE/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\BE\\Address\\PostalCode","title":"Class"},{"location":"locale/BE/Address/PostalCode/#constructor-arguments","text":"// If we should also check for \"special\" postal codes $checkForSpecialPostalCodes: false","title":"Constructor argument(s)"},{"location":"locale/BE/Company/VatNumber/","text":"VAT number # Determines if the supplied VAT number is a valid Belgium VAT number. Class # LaravelExtendedValidation\\Rules\\Locale\\BE\\Company\\VatNumber A valid example is BE0418905287 Constructor argument(s) # none","title":"VAT number"},{"location":"locale/BE/Company/VatNumber/#vat-number","text":"Determines if the supplied VAT number is a valid Belgium VAT number.","title":"VAT number"},{"location":"locale/BE/Company/VatNumber/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\BE\\Company\\VatNumber A valid example is BE0418905287","title":"Class"},{"location":"locale/BE/Company/VatNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/DE/Address/PostalCode/","text":"Postal code # Determines if the supplied postalcode (Postleitzahl /PLZ) is a valid German postalcode. Postalcodes that start with 00, 05, 43 and 62 aren't considered valid. Class # LaravelExtendedValidation\\Rules\\Locale\\DE\\Address\\PostalCode Constructor argument(s) # none","title":"Postal code"},{"location":"locale/DE/Address/PostalCode/#postal-code","text":"Determines if the supplied postalcode (Postleitzahl /PLZ) is a valid German postalcode. Postalcodes that start with 00, 05, 43 and 62 aren't considered valid.","title":"Postal code"},{"location":"locale/DE/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\DE\\Address\\PostalCode","title":"Class"},{"location":"locale/DE/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/DE/Company/VatNumber/","text":"VAT number # Determines if the supplied VAT number is a valid German VAT number. LaravelExtendedValidation\\Rules\\Locale\\DE\\Company\\VatNumber # A valid example is DE999999999 Constructor argument(s) # none","title":"VAT number"},{"location":"locale/DE/Company/VatNumber/#vat-number","text":"Determines if the supplied VAT number is a valid German VAT number.","title":"VAT number"},{"location":"locale/DE/Company/VatNumber/#laravelextendedvalidationruleslocaledecompanyvatnumber","text":"A valid example is DE999999999","title":"LaravelExtendedValidation\\Rules\\Locale\\DE\\Company\\VatNumber"},{"location":"locale/DE/Company/VatNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/DK/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code is a valid Danish postal code. Class # LaravelExtendedValidation\\Rules\\Locale\\DK\\Address\\PostalCode Valid examples: 7000 8210 Constructor argument(s) # none","title":"Postal code"},{"location":"locale/DK/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code is a valid Danish postal code.","title":"Postal code"},{"location":"locale/DK/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\DK\\Address\\PostalCode Valid examples: 7000 8210","title":"Class"},{"location":"locale/DK/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/ES/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code is a valid Spanish postal code. Class # LaravelExtendedValidation\\Rules\\Locale\\ES\\Address\\PostalCode Constructor argument(s) # none","title":"Postal code"},{"location":"locale/ES/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code is a valid Spanish postal code.","title":"Postal code"},{"location":"locale/ES/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\ES\\Address\\PostalCode","title":"Class"},{"location":"locale/ES/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/ES/Company/VatNumber/","text":"VAT number # Determines if the supplied VAT number is a valid Spanish VAT number. Class # LaravelExtendedValidation\\Rules\\Locale\\ES\\Company\\VatNumber A valid example is ESB86261823 Constructor argument(s) # none","title":"VAT number"},{"location":"locale/ES/Company/VatNumber/#vat-number","text":"Determines if the supplied VAT number is a valid Spanish VAT number.","title":"VAT number"},{"location":"locale/ES/Company/VatNumber/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\ES\\Company\\VatNumber A valid example is ESB86261823","title":"Class"},{"location":"locale/ES/Company/VatNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/FR/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code ('code postal') is a valid French postal code. Since Monaco is part of the French Postal System, there is a constructor argument to (dis)allow Monacan postal codes. Please note: 1. military postal codes (starting with 00) are considered valid 2. postal codes starting with 96, 98 and 99 are currently not being used and thus are considered invalid. Class # LaravelExtendedValidation\\Rules\\Locale\\FR\\Address\\PostalCode Constructor argument(s) # $allowMonaco: false","title":"Postal code"},{"location":"locale/FR/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code ('code postal') is a valid French postal code. Since Monaco is part of the French Postal System, there is a constructor argument to (dis)allow Monacan postal codes. Please note: 1. military postal codes (starting with 00) are considered valid 2. postal codes starting with 96, 98 and 99 are currently not being used and thus are considered invalid.","title":"Postal code"},{"location":"locale/FR/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\FR\\Address\\PostalCode","title":"Class"},{"location":"locale/FR/Address/PostalCode/#constructor-arguments","text":"$allowMonaco: false","title":"Constructor argument(s)"},{"location":"locale/FR/Company/VatNumber/","text":"VAT number # Determines if the supplied VAT number is a valid French VAT number. Class # LaravelExtendedValidation\\Rules\\Locale\\FR\\Company\\VatNumber A valid example is FR96552100554 Constructor argument(s) # none","title":"VAT number"},{"location":"locale/FR/Company/VatNumber/#vat-number","text":"Determines if the supplied VAT number is a valid French VAT number.","title":"VAT number"},{"location":"locale/FR/Company/VatNumber/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\FR\\Company\\VatNumber A valid example is FR96552100554","title":"Class"},{"location":"locale/FR/Company/VatNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/GB/Address/PostalCode/","text":"Postal code # Determines if the supplied postalcode (postcode) is conforming to the UK standard of postalcodes. Valid examples are: EC1A 1BB W1T 1FB ASCN 1ZZ (if, $allowSpecialCases is set to true , since this is a British Overseas Territory) List of allowed British Overseas Territories Ascension Island British Indian Ocean Territory British Antarctic Territory Falkland Islands Gibraltar Pitcairn Islands South Georgia and the South Sandwich Islands Saint Helena Tristan da Cunha Turks and Caicos Islands Class # LaravelExtendedValidation\\Rules\\Locale\\UK\\Address\\PostalCode Constructor argument(s) # // Verifies if British Overseas Territories are also allowed $allowSpecialCases: false","title":"Postal code"},{"location":"locale/GB/Address/PostalCode/#postal-code","text":"Determines if the supplied postalcode (postcode) is conforming to the UK standard of postalcodes. Valid examples are: EC1A 1BB W1T 1FB ASCN 1ZZ (if, $allowSpecialCases is set to true , since this is a British Overseas Territory) List of allowed British Overseas Territories Ascension Island British Indian Ocean Territory British Antarctic Territory Falkland Islands Gibraltar Pitcairn Islands South Georgia and the South Sandwich Islands Saint Helena Tristan da Cunha Turks and Caicos Islands","title":"Postal code"},{"location":"locale/GB/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\UK\\Address\\PostalCode","title":"Class"},{"location":"locale/GB/Address/PostalCode/#constructor-arguments","text":"// Verifies if British Overseas Territories are also allowed $allowSpecialCases: false","title":"Constructor argument(s)"},{"location":"locale/GB/Company/VatNumber/","text":"VAT number # Determines if the supplied VAT number is a valid British VAT number. A valid examples are GB123456789 or GB123456789012 . They have to start with GB and be either 9 or 12 characters in length. Class # LaravelExtendedValidation\\Rules\\Locale\\GB\\Company\\VatNumber Constructor argument(s) # none","title":"VAT number"},{"location":"locale/GB/Company/VatNumber/#vat-number","text":"Determines if the supplied VAT number is a valid British VAT number. A valid examples are GB123456789 or GB123456789012 . They have to start with GB and be either 9 or 12 characters in length.","title":"VAT number"},{"location":"locale/GB/Company/VatNumber/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\GB\\Company\\VatNumber","title":"Class"},{"location":"locale/GB/Company/VatNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/GR/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code is a valid Greek postal code (also known as \u03a4\u03b1\u03c7\u03c5\u03b4\u03c1\u03bf\u03bc\u03b9\u03ba\u03cc\u03c2 \u039a\u03ce\u03b4\u03b9\u03ba\u03b1\u03c2 / TK). Valid examples: 49131 85300 Class # LaravelExtendedValidation\\Rules\\Locale\\GR\\Address\\PostalCode Constructor argument(s) # none","title":"Postal code"},{"location":"locale/GR/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code is a valid Greek postal code (also known as \u03a4\u03b1\u03c7\u03c5\u03b4\u03c1\u03bf\u03bc\u03b9\u03ba\u03cc\u03c2 \u039a\u03ce\u03b4\u03b9\u03ba\u03b1\u03c2 / TK). Valid examples: 49131 85300","title":"Postal code"},{"location":"locale/GR/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\GR\\Address\\PostalCode","title":"Class"},{"location":"locale/GR/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/GR/Company/VatNumber/","text":"VAT number # Determines if the supplied VAT number is a valid Greek VAT number (also known as \u03a6\u03a0\u0391). A valid example is EL123456789 Class # LaravelExtendedValidation\\Rules\\Locale\\GR\\Company\\VatNumber Constructor argument(s) # none","title":"VAT number"},{"location":"locale/GR/Company/VatNumber/#vat-number","text":"Determines if the supplied VAT number is a valid Greek VAT number (also known as \u03a6\u03a0\u0391). A valid example is EL123456789","title":"VAT number"},{"location":"locale/GR/Company/VatNumber/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\GR\\Company\\VatNumber","title":"Class"},{"location":"locale/GR/Company/VatNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/IE/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code ('Eircode') is a valid Irish postal code. Class # LaravelExtendedValidation\\Rules\\Locale\\IE\\Address\\PostalCode Constructor argument(s) # none","title":"Postal code"},{"location":"locale/IE/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code ('Eircode') is a valid Irish postal code.","title":"Postal code"},{"location":"locale/IE/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\IE\\Address\\PostalCode","title":"Class"},{"location":"locale/IE/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/IT/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code ('CAP' / Codice di Avviamento Postale) is a valid Italian postal code. Since The Vatican and San Marino are part of the Italian Postal System, there are constructor arguments to allow those postal codes. Please note that 00120 is the postal code of The Vactican and postal codes starting with 4789 belong to San Marino. Class # LaravelExtendedValidation\\Rules\\Locale\\IT\\Address\\PostalCode Constructor argument(s) # $allowVatican: false, $allowSanMarino: false","title":"Postal code"},{"location":"locale/IT/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code ('CAP' / Codice di Avviamento Postale) is a valid Italian postal code. Since The Vatican and San Marino are part of the Italian Postal System, there are constructor arguments to allow those postal codes. Please note that 00120 is the postal code of The Vactican and postal codes starting with 4789 belong to San Marino.","title":"Postal code"},{"location":"locale/IT/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\IT\\Address\\PostalCode","title":"Class"},{"location":"locale/IT/Address/PostalCode/#constructor-arguments","text":"$allowVatican: false, $allowSanMarino: false","title":"Constructor argument(s)"},{"location":"locale/IT/Company/VatNumber/","text":"VAT number # Determines if the supplied VAT number is a valid Italian VAT number. A valid example is IT00632810164 LaravelExtendedValidation\\Rules\\Locale\\IT\\Company\\VatNumber # Constructor argument(s) # none","title":"VAT number"},{"location":"locale/IT/Company/VatNumber/#vat-number","text":"Determines if the supplied VAT number is a valid Italian VAT number. A valid example is IT00632810164","title":"VAT number"},{"location":"locale/IT/Company/VatNumber/#laravelextendedvalidationruleslocaleitcompanyvatnumber","text":"","title":"LaravelExtendedValidation\\Rules\\Locale\\IT\\Company\\VatNumber"},{"location":"locale/IT/Company/VatNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/JP/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code is a valid Japanese postal code. Valid examples are: 183-0016 259-0147 Class # LaravelExtendedValidation\\Rules\\Locale\\JP\\Address\\PostalCode Constructor argument(s) # none","title":"Postal code"},{"location":"locale/JP/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code is a valid Japanese postal code. Valid examples are: 183-0016 259-0147","title":"Postal code"},{"location":"locale/JP/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\JP\\Address\\PostalCode","title":"Class"},{"location":"locale/JP/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/LU/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code is a valid Luxembourg postal code. Class # LaravelExtendedValidation\\Rules\\Locale\\LU\\Address\\PostalCode Constructor argument(s) # none","title":"Postal code"},{"location":"locale/LU/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code is a valid Luxembourg postal code.","title":"Postal code"},{"location":"locale/LU/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\LU\\Address\\PostalCode","title":"Class"},{"location":"locale/LU/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/LU/Company/VatNumber/","text":"VAT number # Determines if the supplied VAT number is a valid Luxembourg's VAT number. A valid example is LU15843111 Class # LaravelExtendedValidation\\Rules\\Locale\\LU\\Company\\VatNumber Constructor argument(s) # none","title":"VAT number"},{"location":"locale/LU/Company/VatNumber/#vat-number","text":"Determines if the supplied VAT number is a valid Luxembourg's VAT number. A valid example is LU15843111","title":"VAT number"},{"location":"locale/LU/Company/VatNumber/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\LU\\Company\\VatNumber","title":"Class"},{"location":"locale/LU/Company/VatNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/NL/Address/PostalCode/","text":"Postal code # Determines if the supplied postalcode (zipcode / postcode) is conforming to the Dutch standard of postalcodes. Valid examples are: 1234AB 1234 AB Class # LaravelExtendedValidation\\Rules\\Locale\\NL\\Address\\PostalCode Constructor argument(s) # // Determines if a zipcode may contain a space. // For example, '1234 AB' will be considered valid when $mayContainSpace is set to true. $mayContainSpace: false","title":"Postal code"},{"location":"locale/NL/Address/PostalCode/#postal-code","text":"Determines if the supplied postalcode (zipcode / postcode) is conforming to the Dutch standard of postalcodes. Valid examples are: 1234AB 1234 AB","title":"Postal code"},{"location":"locale/NL/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\NL\\Address\\PostalCode","title":"Class"},{"location":"locale/NL/Address/PostalCode/#constructor-arguments","text":"// Determines if a zipcode may contain a space. // For example, '1234 AB' will be considered valid when $mayContainSpace is set to true. $mayContainSpace: false","title":"Constructor argument(s)"},{"location":"locale/NL/Company/VatNumber/","text":"VAT number # Determines if the supplied VAT number is a valid Dutch VAT number. Class # LaravelExtendedValidation\\Rules\\Locale\\NL\\Company\\VatNumber A valid example is NL123456782B01 Constructor argument(s) # none","title":"VAT number"},{"location":"locale/NL/Company/VatNumber/#vat-number","text":"Determines if the supplied VAT number is a valid Dutch VAT number.","title":"VAT number"},{"location":"locale/NL/Company/VatNumber/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\NL\\Company\\VatNumber A valid example is NL123456782B01","title":"Class"},{"location":"locale/NL/Company/VatNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/NL/Person/SocialSecurityNumber/","text":"Social Security Number # The Social Security Number (SSN) is also sometimes referred to as 'BSN' (Burgerservicenummer). This validation is based on the so called '11 proef', for more information on this 11 can be found on https://nl.wikipedia.org/wiki/Burgerservicenummer#11-proef . Please note! This is in no way, a verification of the BSN number actually exist and has been given to a person! This is just confirms the validity of BSN number. Example of BSN number that are considered valid are '111222333' and '123456782'. Class # LaravelExtendedValidation\\Rules\\Locale\\NL\\Person\\SocialSecurityNumber Constructor argument(s) # none","title":"Social Security Number"},{"location":"locale/NL/Person/SocialSecurityNumber/#social-security-number","text":"The Social Security Number (SSN) is also sometimes referred to as 'BSN' (Burgerservicenummer). This validation is based on the so called '11 proef', for more information on this 11 can be found on https://nl.wikipedia.org/wiki/Burgerservicenummer#11-proef . Please note! This is in no way, a verification of the BSN number actually exist and has been given to a person! This is just confirms the validity of BSN number. Example of BSN number that are considered valid are '111222333' and '123456782'.","title":"Social Security Number"},{"location":"locale/NL/Person/SocialSecurityNumber/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\NL\\Person\\SocialSecurityNumber","title":"Class"},{"location":"locale/NL/Person/SocialSecurityNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/PT/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code is a Portuguese postal code. 2050 8200 Class # LaravelExtendedValidation\\Rules\\Locale\\PT\\Address\\PostalCode Constructor argument(s) # none","title":"Postal code"},{"location":"locale/PT/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code is a Portuguese postal code. 2050 8200","title":"Postal code"},{"location":"locale/PT/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\PT\\Address\\PostalCode","title":"Class"},{"location":"locale/PT/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/RU/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code is a valid Russian postal code. Valid examples: 191028 191123 191124 Class # LaravelExtendedValidation\\Rules\\Locale\\RU\\Address\\PostalCode Constructor argument(s) # none","title":"Postal code"},{"location":"locale/RU/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code is a valid Russian postal code. Valid examples: 191028 191123 191124","title":"Postal code"},{"location":"locale/RU/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\RU\\Address\\PostalCode","title":"Class"},{"location":"locale/RU/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/SE/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code is a valid Swedish postal code. Valid examples: 343 81 412 81 Class # LaravelExtendedValidation\\Rules\\Locale\\SE\\Address\\PostalCode Constructor argument(s) # none","title":"Postal code"},{"location":"locale/SE/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code is a valid Swedish postal code. Valid examples: 343 81 412 81","title":"Postal code"},{"location":"locale/SE/Address/PostalCode/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\SE\\Address\\PostalCode","title":"Class"},{"location":"locale/SE/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/SE/Company/VatNumber/","text":"VAT number # Determines if the supplied VAT number is a valid Swedish VAT number. A valid example is SE5560362138 Class # LaravelExtendedValidation\\Rules\\Locale\\SE\\Company\\VatNumber Constructor argument(s) # none","title":"VAT number"},{"location":"locale/SE/Company/VatNumber/#vat-number","text":"Determines if the supplied VAT number is a valid Swedish VAT number. A valid example is SE5560362138","title":"VAT number"},{"location":"locale/SE/Company/VatNumber/#class","text":"LaravelExtendedValidation\\Rules\\Locale\\SE\\Company\\VatNumber","title":"Class"},{"location":"locale/SE/Company/VatNumber/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"locale/SK/Address/PostalCode/","text":"Postal code # Determines if the supplied postal code is conforming to the South Korean standard of postal codes. Please note, this is according to the 5-digit standard that has been set in 2015. 37441 24649 LaravelExtendedValidation\\Rules\\Locale\\SK\\Address\\PostalCode # Constructor argument(s) # none","title":"Postal code"},{"location":"locale/SK/Address/PostalCode/#postal-code","text":"Determines if the supplied postal code is conforming to the South Korean standard of postal codes. Please note, this is according to the 5-digit standard that has been set in 2015. 37441 24649","title":"Postal code"},{"location":"locale/SK/Address/PostalCode/#laravelextendedvalidationruleslocaleskaddresspostalcode","text":"","title":"LaravelExtendedValidation\\Rules\\Locale\\SK\\Address\\PostalCode"},{"location":"locale/SK/Address/PostalCode/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"network/Domain/","text":"Domain name # This validation rule checks if the POSTed value is a valid domain name with tld. There is no a limit on the amount of subdomains. Valid examples are: domain.tld subdomain.domain.tld g.co Class # LaravelExtendedValidation\\Rules\\Network\\Domain Constructor argument(s) # none","title":"Domain name"},{"location":"network/Domain/#domain-name","text":"This validation rule checks if the POSTed value is a valid domain name with tld. There is no a limit on the amount of subdomains. Valid examples are: domain.tld subdomain.domain.tld g.co","title":"Domain name"},{"location":"network/Domain/#class","text":"LaravelExtendedValidation\\Rules\\Network\\Domain","title":"Class"},{"location":"network/Domain/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"network/IPv4/","text":"IPv4 # This validation rule checks if the posted IP address is a valid IPv4 address. By default, private IP addresses like '192.168.x.y', '10.x.y.z' and '172.16.x.y' aren't considered valid. Setting the $allowPrivateIpAddress constructor variable to true , they will be considered valid IP addresses. Class # LaravelExtendedValidation\\Rules\\Network\\IPv4 Constructor argument(s) # $allowPrivateIpAddress: false","title":"IPv4"},{"location":"network/IPv4/#ipv4","text":"This validation rule checks if the posted IP address is a valid IPv4 address. By default, private IP addresses like '192.168.x.y', '10.x.y.z' and '172.16.x.y' aren't considered valid. Setting the $allowPrivateIpAddress constructor variable to true , they will be considered valid IP addresses.","title":"IPv4"},{"location":"network/IPv4/#class","text":"LaravelExtendedValidation\\Rules\\Network\\IPv4","title":"Class"},{"location":"network/IPv4/#constructor-arguments","text":"$allowPrivateIpAddress: false","title":"Constructor argument(s)"},{"location":"network/IPv6/","text":"IPv6 # This validation rule checks if the posted IP address is a valid IPv6 address. Valid examples are: 2001:0db8:85a3:0000:1319:8a2e:0370:7344 2001:db8::1428:57ab 2001:db8:::::1428:57ab ::1 Class # LaravelExtendedValidation\\Rules\\Network\\IPv6 Constructor argument(s) # none","title":"IPv6"},{"location":"network/IPv6/#ipv6","text":"This validation rule checks if the posted IP address is a valid IPv6 address. Valid examples are: 2001:0db8:85a3:0000:1319:8a2e:0370:7344 2001:db8::1428:57ab 2001:db8:::::1428:57ab ::1","title":"IPv6"},{"location":"network/IPv6/#class","text":"LaravelExtendedValidation\\Rules\\Network\\IPv6","title":"Class"},{"location":"network/IPv6/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"network/MacAddress/","text":"Mac address # This validation rule checks if the posted MAC address is a valid MAC address. Valid examples are: 7a:7e:53:39:d8:4e 7a-7e-53-39-d8-4e When you instantiate MacAddress, you have option to set the separator sign in the MAC address. Class # LaravelExtendedValidation\\Rules\\Network\\MacAddress Constructor argument(s) # $separatorSign: ':'","title":"Mac address"},{"location":"network/MacAddress/#mac-address","text":"This validation rule checks if the posted MAC address is a valid MAC address. Valid examples are: 7a:7e:53:39:d8:4e 7a-7e-53-39-d8-4e When you instantiate MacAddress, you have option to set the separator sign in the MAC address.","title":"Mac address"},{"location":"network/MacAddress/#class","text":"LaravelExtendedValidation\\Rules\\Network\\MacAddress","title":"Class"},{"location":"network/MacAddress/#constructor-arguments","text":"$separatorSign: ':'","title":"Constructor argument(s)"},{"location":"payment/AmericanExpress/","text":"American Express # This validation rules checks if the posted input is a valid American Express number. Please note, this is no way a check if the number is actually given out by American Express or has sufficient funds! Class # LaravelExtendedValidation\\Rules\\Payment\\AmericanExpress Valid examples are: 3774 0011 1111 115 3700 0000 0100 018 Constructor argument(s) # none","title":"American Express"},{"location":"payment/AmericanExpress/#american-express","text":"This validation rules checks if the posted input is a valid American Express number. Please note, this is no way a check if the number is actually given out by American Express or has sufficient funds!","title":"American Express"},{"location":"payment/AmericanExpress/#class","text":"LaravelExtendedValidation\\Rules\\Payment\\AmericanExpress Valid examples are: 3774 0011 1111 115 3700 0000 0100 018","title":"Class"},{"location":"payment/AmericanExpress/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"payment/DiscoverCard/","text":"Discover Card # This validation rules checks if the posted input is a valid Discover Card number based on their Compliance documentation released in August 2021 https://www.discoverglobalnetwork.com/content/dam/discover/en_us/dgn/pdfs/IPP-VAR-Enabler-Compliance.pdf Class # LaravelExtendedValidation\\Rules\\Payment\\DiscoverCard Please note, this is no way a check if the number is actually given out by Discover Card or has sufficient funds! Valid examples are: 6011 6011 6011 6611 6445 6445 6445 6445 Constructor argument(s) # none","title":"Discover Card"},{"location":"payment/DiscoverCard/#discover-card","text":"This validation rules checks if the posted input is a valid Discover Card number based on their Compliance documentation released in August 2021 https://www.discoverglobalnetwork.com/content/dam/discover/en_us/dgn/pdfs/IPP-VAR-Enabler-Compliance.pdf","title":"Discover Card"},{"location":"payment/DiscoverCard/#class","text":"LaravelExtendedValidation\\Rules\\Payment\\DiscoverCard Please note, this is no way a check if the number is actually given out by Discover Card or has sufficient funds! Valid examples are: 6011 6011 6011 6611 6445 6445 6445 6445","title":"Class"},{"location":"payment/DiscoverCard/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"payment/IBAN/","text":"IBAN # This validation rules checks if the posted input is a valid IBAN bank account number. Class # LaravelExtendedValidation\\Rules\\Payment\\IBAN Constructor argument(s) # none","title":"IBAN"},{"location":"payment/IBAN/#iban","text":"This validation rules checks if the posted input is a valid IBAN bank account number.","title":"IBAN"},{"location":"payment/IBAN/#class","text":"LaravelExtendedValidation\\Rules\\Payment\\IBAN","title":"Class"},{"location":"payment/IBAN/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"payment/MasterCard/","text":"MasterCard # This validation rules checks if the posted input is a valid MasterCard number. Please note, this is no way a check if the number is actually given out by MasterCard or has sufficient funds! Class # LaravelExtendedValidation\\Rules\\Payment\\MasterCard Valid examples are: 5431 1111 1111 1111 5123 4558 0630 8521 Constructor argument(s) # none","title":"MasterCard"},{"location":"payment/MasterCard/#mastercard","text":"This validation rules checks if the posted input is a valid MasterCard number. Please note, this is no way a check if the number is actually given out by MasterCard or has sufficient funds!","title":"MasterCard"},{"location":"payment/MasterCard/#class","text":"LaravelExtendedValidation\\Rules\\Payment\\MasterCard Valid examples are: 5431 1111 1111 1111 5123 4558 0630 8521","title":"Class"},{"location":"payment/MasterCard/#constructor-arguments","text":"none","title":"Constructor argument(s)"},{"location":"payment/Visa/","text":"Visa # This validation rules checks if the posted input is a valid Visa credit card number. Both 13 and 16 characters long card numbers are accepted. Please note, this is no way a check if the number is actually given out by Visa or has sufficient funds! Class # LaravelExtendedValidation\\Rules\\Payment\\Visa Valid examples are: 4111 1111 1111 1111 4242 4242 4242 4242 Constructor argument(s) # none","title":"Visa"},{"location":"payment/Visa/#visa","text":"This validation rules checks if the posted input is a valid Visa credit card number. Both 13 and 16 characters long card numbers are accepted. Please note, this is no way a check if the number is actually given out by Visa or has sufficient funds!","title":"Visa"},{"location":"payment/Visa/#class","text":"LaravelExtendedValidation\\Rules\\Payment\\Visa Valid examples are: 4111 1111 1111 1111 4242 4242 4242 4242","title":"Class"},{"location":"payment/Visa/#constructor-arguments","text":"none","title":"Constructor argument(s)"}]}